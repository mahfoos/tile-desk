@import "./src/assets/sass/cds/_variables.scss";
$width-title: 80%;

.footer-wpr {
    // position: relative;
    display: flex;
    justify-content: center;
    gap: 40px;
    width: 100%;
    height: $height-header;
    max-height: $height-header;
    // top: 0;
    // left: 0;
    // margin-top: 10px;

}

#cds-save-intent-btn {
    background: $light-blue;
    color: $light-black;
    box-shadow: none !important;
    font-weight: 500 !important;
    font-family: "Poppins", "Roboto", "Arial", sans-serif !important;
    text-transform: capitalize !important;
    font-size: 14px !important;
}

#cds-save-intent-btn:hover {
    background: rgb(138, 180, 248, 0.8) !important;
}

.error---msg {
    position: absolute;
    top: 39px;
    font-size: 11px;
    color: #ed2e19;
    font-weight: 500;
}


.onff-intent-webhook {
    // position: absolute;
    // right: 180px;
    // top: 22px;
    align-self: center;
    // margin-top: 8px;

}

.switch-label {
    position: relative;
    top: -22px;
    right: -40px;
    font-size: 14px;
    color: #e8eaed;

}


// Config
$circle-size: 40px;

// Unfortunatly we need a wrapper element containing the fixed width for centering the button within the animtion (you could also apply the width as an inline style).
.loading-btn-wrapper {
    display: inline-block;
    width: 150px;
    height: $circle-size;
    text-align: center;
    right: 0px;
    // position: absolute;
    margin: 5px 10px 5px 5px;
}

.loading-btn {
  $root: &;
  
  position: relative;
  display: inline-block;
  width: 100%;
  height: 100%;
  
  &#cds-save-intent-btn{
    background: #3ea9f5;
    border: 1px solid #3ea9f5;
    box-shadow: none;
  }
  
  margin: 0px;
//   border-radius: 16px;

  cursor: pointer;

  transition: all .33s ease-in-out;
  
  &#cds-save-intent-btn:hover {
    background: rgba(138, 180, 248, 0.8);
    box-shadow: none;
    background-color: #1e293b;
    border: 1px solid white;
  }

  &, &:focus {
    outline: none;
  }
  
  // Styles for all states
  &--pending,
  &--success,
  &--fail {
    // Morph button to circle (width equals height)
    // width: $circle-size;
    
    // Prevent any further clicks triggering events during animation
    pointer-events: none;
    cursor: default;
    margin: 0;
    padding: 0px;
    width: 100%;
    height: 100%;
    
    // Hide text
    #{$root}__text {
      opacity: 0;
    }
  }
  
  // State "pending"
  // Show loading indicator
  &--pending:before {
    content: '';

    position: absolute;
    top: 50%;
    left: 50%;

    display: inline-block;

    // Can't use percentage here as we already show this icon during morph animation
    height: #{$circle-size * .7};
    width: #{$circle-size * .7};

    border: 3px solid rgba(255, 255, 255, .33);
    border-top-color: #fff;
    border-radius: 50%;

    animation:
      loading-btn--fade-in .33s ease,
      loading-btn--rotation .66s linear 0s infinite;
  }
    
  // Success state - show check icon
  &--success {
    // Different background color (also on hover)
    &, &:hover {
      background: #8bc34a !important;
      border: 1px solid #8bc34a;
    }

    // Use "after" pseudo to trigger new fade in animation, as "before" is already used on "--pending"
    &:after {
      content: '';

      position: absolute;
      top: 50%;
      left: 50%;

      // Simulate checkmark icon
      display: inline-block;
      height: 25%;
      width: 20%; //50%;

      border: 3px solid #fff;
      border-top-width: 0;
      border-right-width: 0;
      outline: none;
      transform: translate(-50%, -75%) rotate(-45deg);

      animation: 
        loading-btn--fade-in .6s ease;
    }
  } 

  // Fail state - show cross icon
  &--fail {
    
    // Different background color (also on hover)
    &, &:hover {
      background: #ff5722;
      border: 1px solid #ff5722;
    }

    // Use "after" pseudo to trigger new fade in animation, as "before" is already used on "--pending"
    &:after {
      content: '';

      position: absolute;
      top: 50%;
      left: 50%;

      // Simulate cross icon
      display: inline-block;
      height: 65%;
      width: 65%;

      // Using background gradient is the only solution creating a cross with a single element
      background: 
        linear-gradient(
          to bottom,
          transparent 44%, 
          #fff 44%, 
          #fff 56%,  
          transparent 56%
        ),

        linear-gradient(
          to right,
          transparent 44%, 
          #fff 44%, 
          #fff 56%,  
          transparent 56%
      );

      transform: translate(-50%, -50%) rotate(-45deg);

      animation: 
        loading-btn--fade-in .6s ease;
    }
  } 
  
  // Text has to be positioned absolute in order prevent line-breaks or trimming of text when morphing button to circle.  
  &__text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    
    font-size: 13px;
    color: #fff;
    
    transition: inherit;
  }
}


/**
 * Animations
 */

@keyframes loading-btn--fade-in {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

@keyframes loading-btn--rotation {
    0% {
        transform: translate(-50%, -50%) rotate(0deg);
    }

    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}


/**
 * Optical stuff - has nothing todo with button animation.
 */

 .state-list {
    margin-bottom: 12px;

    .loading-btn-wrapper {
      background: repeating-linear-gradient(
        45deg,
        #fff,
        #fff 10px,
        #f0f0f0 10px,
        #f0f0f0 20px
      );
    }
}
  
.loading-btn-wrapper {
    & + & {
      margin-left: 8px;
    }
}
